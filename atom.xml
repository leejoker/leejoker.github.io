<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ESPIER</title>
  
  <subtitle>路漫漫其修选兮，吾将上下而求索</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leejoker.github.io/"/>
  <updated>2019-02-06T11:58:52.238Z</updated>
  <id>http://leejoker.github.io/</id>
  
  <author>
    <name>leejoker</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构与算法学习系列(二)</title>
    <link href="http://leejoker.github.io/2019/02/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97(%E4%BA%8C)/"/>
    <id>http://leejoker.github.io/2019/02/05/数据结构与算法学习系列(二)/</id>
    <published>2019-02-05T14:36:10.000Z</published>
    <updated>2019-02-06T11:58:52.238Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h1&gt;&lt;p&gt;线性表是一个存储相同类型数据元素的有限序列。&lt;br&gt;这里面需要关注的两个点就是，相同类型的数据、有限序列。  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;线性表包含两种类型：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;顺序表。使用一段地址连续的存储单元依次存储线性表的数据元素。&lt;/li&gt;
&lt;li&gt;链表。使用一组任意的存储单元存放线性表的元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;顺序表&quot;&gt;&lt;a href=&quot;#顺序表&quot; class=&quot;headerlink&quot; title=&quot;顺序表&quot;&gt;&lt;/a&gt;顺序表&lt;/h1&gt;&lt;h2 id=&quot;顺序表的特性&quot;&gt;&lt;a href=&quot;#顺序表的特性&quot; class=&quot;headerlink&quot; title=&quot;顺序表的特性&quot;&gt;&lt;/a&gt;顺序表的特性&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;顺序表使用的一段连续的存储空间，因此只要知道存储顺序表的起始地址，就可以计算表中任意位置元素的地址。所以，&lt;strong&gt;计算任意一个元素的存储地址的时间是相等的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;由于上述特性，顺序表具有随机存取的特性。&lt;/li&gt;
&lt;li&gt;顺序表存取操作的时间复杂度为O(1)。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;顺序表的实现&quot;&gt;&lt;a href=&quot;#顺序表的实现&quot; class=&quot;headerlink&quot; title=&quot;顺序表的实现&quot;&gt;&lt;/a&gt;顺序表的实现&lt;/h2&gt;&lt;p&gt;下面就是一个简单的顺序表的实现：  &lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://leejoker.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://leejoker.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="http://leejoker.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>clojure读书笔记其四</title>
    <link href="http://leejoker.github.io/2019/02/04/clojure%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%B6%E5%9B%9B/"/>
    <id>http://leejoker.github.io/2019/02/04/clojure学习笔记其四/</id>
    <published>2019-02-03T16:20:41.000Z</published>
    <updated>2019-02-05T14:32:23.536Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;这个系列还会继续的&quot;&gt;&lt;a href=&quot;#这个系列还会继续的&quot; class=&quot;headerlink&quot; title=&quot;这个系列还会继续的&quot;&gt;&lt;/a&gt;这个系列还会继续的&lt;/h2&gt;&lt;p&gt;忽然发现我之前已经建立了这篇博客，心想姑且把这篇完成吧，后续更高级的内容等我琢磨明白了再放出来。这个系列并不是一个单纯学习教程，更是我对Clojure认知的一种提现吧，说实话从java这种语言跳到clojure上还是有挺多问题的，至少思维方式可能就需要进行蛮大的转变，后续估计还会在读一些SICP之类的内容去逐渐加深自己对于LISP这个深坑的理解。&lt;/p&gt;
&lt;h2 id=&quot;说一说常用的东西&quot;&gt;&lt;a href=&quot;#说一说常用的东西&quot; class=&quot;headerlink&quot; title=&quot;说一说常用的东西&quot;&gt;&lt;/a&gt;说一说常用的东西&lt;/h2&gt;&lt;p&gt;这一节就来说一说常用的一些函数，在实际的应用中不论是刷题还是实际的开发应用，都会经常的用到，比如递归 map reduce apply 等等，这些都是接触clojure之后都会经常看到，用到的方法。那么，今天就来说说这些吧。&lt;/p&gt;
&lt;h2 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h2&gt;&lt;p&gt;递归的话在一般的语言中（没错，我说的就是Java），一般都会采用这种方式：  &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; param)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//do something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  doMethod(param);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在方法内部调用方法本身实现递归，完成方法的递归调用。&lt;br&gt;然而，在clojure中这种方式虽然可以，但却会造成堆栈的溢出（因为Clojure的尾递归优化不是用的原函数名,而是使用的recur，使用原函数名会不断产生新的实例从而造成堆栈溢出）。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://leejoker.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="clojure" scheme="http://leejoker.github.io/tags/clojure/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法学习系列(一)</title>
    <link href="http://leejoker.github.io/2019/02/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97(%E4%B8%80)/"/>
    <id>http://leejoker.github.io/2019/02/03/数据结构与算法学习系列(一)/</id>
    <published>2019-02-03T13:17:44.000Z</published>
    <updated>2019-02-06T12:02:10.359Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于新坑和旧坑的说明&quot;&gt;&lt;a href=&quot;#关于新坑和旧坑的说明&quot; class=&quot;headerlink&quot; title=&quot;关于新坑和旧坑的说明&quot;&gt;&lt;/a&gt;关于新坑和旧坑的说明&lt;/h2&gt;&lt;p&gt;我又开了一个新的坑，迫于近期一些方面的压力，我又把数据结构和算法这个东西捡起来了，至于之前Clojure学习笔记系列的坑，咳咳，虽然还会更新下去，但是估计会延后很多了，因为学了Clojure蛮久的时间了，没有太多的实践机会，也没有对Clojure理解的足够深，因此这个系列估计会稍微放一放，等我理解足够深刻了在继续下去（对不起，还是因为懒XD）。&lt;/p&gt;
&lt;h2 id=&quot;什么是算法&quot;&gt;&lt;a href=&quot;#什么是算法&quot; class=&quot;headerlink&quot; title=&quot;什么是算法&quot;&gt;&lt;/a&gt;什么是算法&lt;/h2&gt;&lt;p&gt;算法，这个东西其实是思路的体现，也可以说是问题的解决方案。相信大家也都看到过这句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;程序=算法+数据结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然这么说或许不够准确，但是算法对于程序本身而言意义是十分重大的。也是影响程序性能的一个关键因素。大多时候算法都是一个由实际问题转化而成的数学模型，因此，像写出一个好的算法的话首先要能充分理解问题，然后就是将问题转化成一个高效的数学模型。所以说啊，学好数学还是很关键滴~&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://leejoker.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://leejoker.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="http://leejoker.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>配置lein的私有依赖仓库</title>
    <link href="http://leejoker.github.io/2018/11/01/%E9%85%8D%E7%BD%AElein%E7%9A%84%E7%A7%81%E6%9C%89%E4%BE%9D%E8%B5%96%E4%BB%93%E5%BA%93/"/>
    <id>http://leejoker.github.io/2018/11/01/配置lein的私有依赖仓库/</id>
    <published>2018-11-01T02:49:43.000Z</published>
    <updated>2018-11-01T07:43:40.100Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lein与私有仓库&quot;&gt;&lt;a href=&quot;#lein与私有仓库&quot; class=&quot;headerlink&quot; title=&quot;lein与私有仓库&quot;&gt;&lt;/a&gt;lein与私有仓库&lt;/h2&gt;&lt;p&gt;lein在new一个新的项目的时候都会从maven或者clojars上下载对应的依赖，但是一旦你离开了互联网环境只有一个maven私服的时候，这一切就变得不是那么美好了。因此，我们需要配置一下lein，让它能够从我们指定的位置下载依赖。&lt;/p&gt;
&lt;h2 id=&quot;创建profiles-clj&quot;&gt;&lt;a href=&quot;#创建profiles-clj&quot; class=&quot;headerlink&quot; title=&quot;创建profiles.clj&quot;&gt;&lt;/a&gt;创建profiles.clj&lt;/h2&gt;&lt;p&gt;在$HOME/.lein/下创建profiles.clj文件，在其中添加如下内容：&lt;br&gt;
    
    </summary>
    
    
      <category term="clojure" scheme="http://leejoker.github.io/tags/clojure/"/>
    
      <category term="lein" scheme="http://leejoker.github.io/tags/lein/"/>
    
      <category term="nexus" scheme="http://leejoker.github.io/tags/nexus/"/>
    
  </entry>
  
  <entry>
    <title>clojure学习笔记其三</title>
    <link href="http://leejoker.github.io/2018/01/21/clojure%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%B6%E4%B8%89/"/>
    <id>http://leejoker.github.io/2018/01/21/clojure学习笔记其三/</id>
    <published>2018-01-21T07:47:33.000Z</published>
    <updated>2018-05-09T14:23:26.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Namespace&quot;&gt;&lt;a href=&quot;#Namespace&quot; class=&quot;headerlink&quot; title=&quot;Namespace&quot;&gt;&lt;/a&gt;Namespace&lt;/h1&gt;&lt;p&gt;名称空间对于Clojure来说是一个逻辑上对于代码进行分组的概念，类似于Java的package，通过使用名称空间能够规避方法名冲突，有效的对代码进行管理。主要应用的话，其实就是方便代码的引入和使用了，毕竟你不可能将所有代码放到一个clj文件中。&lt;/p&gt;
&lt;h3 id=&quot;create-ns&quot;&gt;&lt;a href=&quot;#create-ns&quot; class=&quot;headerlink&quot; title=&quot;create-ns&quot;&gt;&lt;/a&gt;create-ns&lt;/h3&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user&amp;gt; (create-ns &#39;clojure.by.example)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样一个名称空间就建立好了，是不是so easy！&lt;/p&gt;
&lt;h3 id=&quot;in-ns&quot;&gt;&lt;a href=&quot;#in-ns&quot; class=&quot;headerlink&quot; title=&quot;in-ns&quot;&gt;&lt;/a&gt;in-ns&lt;/h3&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;; create the namespace and switch to it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;in-ns&lt;/span&gt;&lt;/span&gt; &#39;first-namespace)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;in-ns的主要作用是切换到指定的namespace中，如果这个namespace不存在，则会创建他。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://leejoker.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="clojure" scheme="http://leejoker.github.io/tags/clojure/"/>
    
  </entry>
  
  <entry>
    <title>hexoeda更新20180118</title>
    <link href="http://leejoker.github.io/2018/01/18/hexoeda%E6%9B%B4%E6%96%B020180118/"/>
    <id>http://leejoker.github.io/2018/01/18/hexoeda更新20180118/</id>
    <published>2018-01-18T14:18:47.000Z</published>
    <updated>2018-05-09T14:23:26.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="hexoeda" scheme="http://leejoker.github.io/tags/hexoeda/"/>
    
  </entry>
  
  <entry>
    <title>Atom配置国内源</title>
    <link href="http://leejoker.github.io/2018/01/15/Atom%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E6%BA%90/"/>
    <id>http://leejoker.github.io/2018/01/15/Atom配置国内源/</id>
    <published>2018-01-15T07:48:19.000Z</published>
    <updated>2018-05-09T14:23:26.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="atom" scheme="http://leejoker.github.io/tags/atom/"/>
    
      <category term="配置技巧" scheme="http://leejoker.github.io/tags/%E9%85%8D%E7%BD%AE%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>clojure学习笔记其二</title>
    <link href="http://leejoker.github.io/2018/01/07/clojure%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%B6%E4%BA%8C/"/>
    <id>http://leejoker.github.io/2018/01/07/clojure学习笔记其二/</id>
    <published>2018-01-07T08:02:17.000Z</published>
    <updated>2018-05-09T14:23:26.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;今天的主题是Function&quot;&gt;&lt;a href=&quot;#今天的主题是Function&quot; class=&quot;headerlink&quot; title=&quot;今天的主题是Function&quot;&gt;&lt;/a&gt;今天的主题是Function&lt;/h1&gt;&lt;p&gt;正如标题所言，今天这篇笔记的主题是function，当然也就是lisp语言中的一等公民，”函数”啦XD&lt;/p&gt;
&lt;h2 id=&quot;那么直入主题，首先来看一下怎么定义一个函数：&quot;&gt;&lt;a href=&quot;#那么直入主题，首先来看一下怎么定义一个函数：&quot; class=&quot;headerlink&quot; title=&quot;那么直入主题，首先来看一下怎么定义一个函数：&quot;&gt;&lt;/a&gt;那么直入主题，首先来看一下怎么定义一个函数：&lt;/h2&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;;    name   params         body&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;;;    -----  ------  -------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; greet  [name]  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;str&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello, &quot;&lt;/span&gt; name) )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我引用了&lt;a href=&quot;https://www.clojure.org/guides/learn/functions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;中的说明。&lt;/p&gt;
&lt;p&gt;那么这个函数的使用就可以像上一篇中所说的那样：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (greet &quot;小明&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;Hello, 小明&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;你也可以给你的方法增加方法说明：&quot;&gt;&lt;a href=&quot;#你也可以给你的方法增加方法说明：&quot; class=&quot;headerlink&quot; title=&quot;你也可以给你的方法增加方法说明：&quot;&gt;&lt;/a&gt;你也可以给你的方法增加方法说明：&lt;/h2&gt;&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;defn&lt;/span&gt;&lt;/span&gt; greet  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;this is the greet function for you&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [name]  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;str&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello, &quot;&lt;/span&gt; name))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://leejoker.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="clojure" scheme="http://leejoker.github.io/tags/clojure/"/>
    
  </entry>
  
  <entry>
    <title>clojure学习笔记其一</title>
    <link href="http://leejoker.github.io/2018/01/06/clojure%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%85%B6%E4%B8%80/"/>
    <id>http://leejoker.github.io/2018/01/06/clojure学习笔记其一/</id>
    <published>2018-01-06T07:59:05.000Z</published>
    <updated>2018-05-09T14:23:26.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;　　学习clojure的起因主要还是想学习lisp语言吧。由于既想学lisp现阶段又无法脱离jvm这个大的框架,所以就发现了clojure语言，然后就踏上了“自虐”的不归路:D&lt;/p&gt;
&lt;h2 id=&quot;学习思路&quot;&gt;&lt;a href=&quot;#学习思路&quot; class=&quot;headerlink&quot; title=&quot;学习思路&quot;&gt;&lt;/a&gt;学习思路&lt;/h2&gt;&lt;p&gt;　　在刚开始学习的过程中，我看了很多相关的教程、博客，但总是感觉不得其门而入，简单来说就是找不到这门语言的学习思路。大体是因为clojure和传统的C type语言思路不同吧，再加上语法糖太多，导致各种磕磕碰碰。仔细想想，还是整理一下目前所学，也希望整理的东西能给clojure的初学者提供一定的帮助。&lt;br&gt;　　本系列的笔记是基于官方文档整理、补充的，如有错漏，请在评论区指出，以便及时进行修改，也有助于我自身的提升和进步。&lt;/p&gt;
&lt;h2 id=&quot;语言学习的第一步&quot;&gt;&lt;a href=&quot;#语言学习的第一步&quot; class=&quot;headerlink&quot; title=&quot;语言学习的第一步&quot;&gt;&lt;/a&gt;语言学习的第一步&lt;/h2&gt;&lt;p&gt;没错，就是Hello World！&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user=&amp;gt; (println &quot;Hello, Clojure!&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello, Clojure!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这一句是在repl中执行的，哦，差点忘了，记得安装lein哦，至于怎么装请自行百度，如果需要梯子，emmmmm，自己想办法吧，程序员或者想成为程序员的人不应该被一面墙阻拦（有人敲门，我去开一下，Σ(っ °Д °;)っ好像有哪里不对）  &lt;/p&gt;
&lt;p&gt;言归正传，输出的结果是“Hello, Clojure!”，但方法的返回值是nil，这个输出其实就是函数println的副产物。&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://leejoker.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="clojure" scheme="http://leejoker.github.io/tags/clojure/"/>
    
  </entry>
  
  <entry>
    <title>折腾hexo系列之在jacman里集成gitment评论系统</title>
    <link href="http://leejoker.github.io/2017/10/11/%E6%8A%98%E8%85%BEhexo%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9C%A8jacman%E9%87%8C%E9%9B%86%E6%88%90gitment%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>http://leejoker.github.io/2017/10/11/折腾hexo系列之在jacman里集成gitment评论系统/</id>
    <published>2017-10-10T16:09:08.000Z</published>
    <updated>2018-05-09T14:23:26.000Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;从disqus到gitment&quot;&gt;&lt;a href=&quot;#从disqus到gitment&quot; class=&quot;headerlink&quot; title=&quot;从disqus到gitment&quot;&gt;&lt;/a&gt;从disqus到gitment&lt;/h3&gt;&lt;p&gt;其实就易用性和使用效果上讲，disqus还是很好用的，只需要注册一个账号，在主题里配置一下就可以了，然而，disqus最大的问题还是在于&lt;del&gt;翻墙&lt;/del&gt;，咳，科学上网。今天这个问题我的一个小伙伴也跟我吐槽了，毕竟不是每个人都会去弄个vpn啊，ss啊之类的东西。因此，回家之后果断搞起。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="折腾hexo" scheme="http://leejoker.github.io/tags/%E6%8A%98%E8%85%BEhexo/"/>
    
  </entry>
  
  <entry>
    <title>《大道至简》读书笔记</title>
    <link href="http://leejoker.github.io/2017/08/16/%E3%80%8A%E5%A4%A7%E9%81%93%E8%87%B3%E7%AE%80%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://leejoker.github.io/2017/08/16/《大道至简》读书笔记/</id>
    <published>2017-08-16T04:55:14.000Z</published>
    <updated>2018-05-09T14:23:26.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编程的精义&quot;&gt;&lt;a href=&quot;#编程的精义&quot; class=&quot;headerlink&quot; title=&quot;编程的精义&quot;&gt;&lt;/a&gt;编程的精义&lt;/h2&gt;&lt;p&gt;开发是一个阐述思想的过程，把想法转化成逻辑，最后变成代码，就是整个开发的过程。  &lt;/p&gt;
&lt;p&gt;编程，是开发的一环，也就是把逻辑转化为代码的过程。  &lt;/p&gt;
&lt;p&gt;正如文中所说的那样，“程序=算法+结构”。算法是顺序，分支，循环的组合变化，结构是思想在程序中的映射。因此，代码在编程里是最为easy的一环。  &lt;/p&gt;
&lt;p&gt;嘛~~第一章大致就是说了这么一个内容，强调了在编程过程中最为重要的反而是思想，逻辑。掌握语言和转化成代码其实都是最为容易的事。PS:是不是说我只要懂得足够多就能当PPT架构师了:)  &lt;/p&gt;
&lt;p&gt;当然，这里说代码是思想的转化自然是没什么问题的，然而写代码同样是一个磨练技艺的过程，怎么写更好，怎么写更易懂，怎么写更容易维护，这也是一个程序猿需要不断去锻炼学习的。PS：这一段与原文主旨没什么关系，只是忽然想到就加上了。不过话说回来，在这方面如果能做到尽善尽美，这让接盘子的人会非常开心吧(o゜▽゜)o☆&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="http://leejoker.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>hexoeda初版终于完成了</title>
    <link href="http://leejoker.github.io/2017/03/21/hexoeda%E5%88%9D%E7%89%88%E7%BB%88%E4%BA%8E%E5%AE%8C%E6%88%90%E4%BA%86/"/>
    <id>http://leejoker.github.io/2017/03/21/hexoeda初版终于完成了/</id>
    <published>2017-03-21T13:18:17.000Z</published>
    <updated>2018-05-09T14:23:26.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="hexoeda" scheme="http://leejoker.github.io/tags/hexoeda/"/>
    
  </entry>
  
  <entry>
    <title>26岁的细思极恐</title>
    <link href="http://leejoker.github.io/2017/03/17/26%E5%B2%81%E7%9A%84%E7%BB%86%E6%80%9D%E6%9E%81%E6%81%90/"/>
    <id>http://leejoker.github.io/2017/03/17/26岁的细思极恐/</id>
    <published>2017-03-17T13:53:54.000Z</published>
    <updated>2018-05-09T14:23:26.000Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;班车上的感慨（人总是莫名伤感233333）&quot;&gt;&lt;a href=&quot;#班车上的感慨（人总是莫名伤感233333）&quot; class=&quot;headerlink&quot; title=&quot;班车上的感慨（人总是莫名伤感233333）&quot;&gt;&lt;/a&gt;&lt;strong&gt;班车上的感慨（人总是莫名伤感233333）&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;　　转眼间已经快工作3年了，年龄也逐渐到达了26岁，我不知道我会在IT这个行业坚持多久，或许是几年也或许是一辈子。人们总是说时光荏苒，白驹过隙。但不仔细回头想想，真的不会发现时间就这样在每天匆忙的上下班中从自己的身后溜走了。&lt;br&gt;　　回想过去两年的工作（我是在传统开发行业工作的，互联网接触的不多，主要还是学了没地方用QAQ），虽然在技术上逐渐成熟，也学了很多的东西（想想自己从刚毕业什么都不会，到现在当个开发组的小组长内心还是颇为自豪的23333），框架的，前端的，后端的，也踩了各种坑，但是看看前沿的论坛新闻，感觉自己离这个时代要求的能力还是有不小差距的。不能沉迷于所得的成就，人总是得向前看。&lt;br&gt;　　30而立，但看着自己离30岁越来越近，事业上，爱情上都是毫无建树（单身狗。。。哇的一声哭了出来），不禁心里有了些触动，这也是我写这篇博文的动机（估计没什么人愿意看我发牢骚）。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://leejoker.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下如何添加ppa仓库</title>
    <link href="http://leejoker.github.io/2016/10/11/Ubuntu%E4%B8%8B%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0ppa%E4%BB%93%E5%BA%93/"/>
    <id>http://leejoker.github.io/2016/10/11/Ubuntu下如何添加ppa仓库/</id>
    <published>2016-10-11T14:41:21.000Z</published>
    <updated>2018-05-09T14:23:26.000Z</updated>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Ubuntu下添加ppa仓库&quot;&gt;&lt;a href=&quot;#Ubuntu下添加ppa仓库&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu下添加ppa仓库&quot;&gt;&lt;/a&gt;Ubuntu下添加ppa仓库&lt;/h4&gt;&lt;p&gt;此处以安装atom为例，命令如下：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo add-apt-repository ppa:webupd8team/atom  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install atom&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就把atom的仓库添加并安装完成了。  &lt;/p&gt;
&lt;p&gt;然而，并没有这么简单&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo: add-apt-repository : command not found&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;mdzz 这是怎么回事，不应该是这样的(╯‵□′)╯︵┻━┻    &lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://leejoker.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>bilibili-go项目源码学习笔记_1</title>
    <link href="http://leejoker.github.io/2016/09/27/bilibili-go%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://leejoker.github.io/2016/09/27/bilibili-go项目源码学习笔记-1/</id>
    <published>2016-09-26T16:02:19.000Z</published>
    <updated>2018-05-09T14:23:26.000Z</updated>
    
    <summary type="html">
    
      &lt;h4 id=&quot;bilibili-go服务加载流程浅析&quot;&gt;&lt;a href=&quot;#bilibili-go服务加载流程浅析&quot; class=&quot;headerlink&quot; title=&quot;bilibili-go服务加载流程浅析&quot;&gt;&lt;/a&gt;bilibili-go服务加载流程浅析&lt;/h4&gt;&lt;p&gt;main.go中使用了service包中的application.go创建了新的应用，进而开启了bilibili-go服务，并监听了8080端口。代码如下：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;github.com/go-playground/log&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;github.com/whiteblue/bilibili-go/service&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    app, err := service.NewApplication(&lt;span class=&quot;string&quot;&gt;&quot;conf.json&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        log.Fatal(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    app.Router.Run(&lt;span class=&quot;string&quot;&gt;&quot;:8080&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在application.go中，使用了gin作为web框架，并依次执行了以下操作：&lt;br&gt;
    
    </summary>
    
    
      <category term="go" scheme="http://leejoker.github.io/tags/go/"/>
    
      <category term="bilibili" scheme="http://leejoker.github.io/tags/bilibili/"/>
    
  </entry>
  
  <entry>
    <title>bilibili-go项目源码学习笔记_2</title>
    <link href="http://leejoker.github.io/2016/09/27/bilibili-go%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/"/>
    <id>http://leejoker.github.io/2016/09/27/bilibili-go项目源码学习笔记-2/</id>
    <published>2016-09-26T16:02:19.000Z</published>
    <updated>2018-05-09T14:23:26.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;这一篇主要说明application.go的主要构成和其中用到方法的主要作用。&lt;/p&gt;
&lt;h5 id=&quot;参数定义&quot;&gt;&lt;a href=&quot;#参数定义&quot; class=&quot;headerlink&quot; title=&quot;参数定义&quot;&gt;&lt;/a&gt;参数定义&lt;/h5&gt;&lt;p&gt;application.go中定义了初始化时需要用到的常量和变量，  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;常量定义：  &lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    INDEX_CACHE        = &lt;span class=&quot;string&quot;&gt;&quot;index&quot;&lt;/span&gt;        &lt;span class=&quot;comment&quot;&gt;//各类别下rank&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ALL_RANK_CACHE     = &lt;span class=&quot;string&quot;&gt;&quot;all_rank&quot;&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;//总的rank&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BANGUMI_CACHE      = &lt;span class=&quot;string&quot;&gt;&quot;bangumi&quot;&lt;/span&gt;      &lt;span class=&quot;comment&quot;&gt;//番剧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BANGUMI_LIST_CACHE = &lt;span class=&quot;string&quot;&gt;&quot;bangumi_list&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//新番放松表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SORT_TOP_CACHE     = &lt;span class=&quot;string&quot;&gt;&quot;sort-&quot;&lt;/span&gt;        &lt;span class=&quot;comment&quot;&gt;//具体某个类别rank(这个在index_cache中要用到)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LIVE_INDEX_CACHE   = &lt;span class=&quot;string&quot;&gt;&quot;live_index&quot;&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;//直播rank&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="go" scheme="http://leejoker.github.io/tags/go/"/>
    
      <category term="bilibili" scheme="http://leejoker.github.io/tags/bilibili/"/>
    
  </entry>
  
  <entry>
    <title>对于Go语言中指针的思路整理</title>
    <link href="http://leejoker.github.io/2016/09/21/%E5%AF%B9%E4%BA%8EGo%E8%AF%AD%E8%A8%80%E4%B8%AD%E6%8C%87%E9%92%88%E7%9A%84%E6%80%9D%E8%B7%AF%E6%95%B4%E7%90%86/"/>
    <id>http://leejoker.github.io/2016/09/21/对于Go语言中指针的思路整理/</id>
    <published>2016-09-21T04:58:24.000Z</published>
    <updated>2018-05-09T14:23:26.000Z</updated>
    
    <summary type="html">
    
      &lt;h5 id=&quot;为什么要写这个&quot;&gt;&lt;a href=&quot;#为什么要写这个&quot; class=&quot;headerlink&quot; title=&quot;为什么要写这个&quot;&gt;&lt;/a&gt;为什么要写这个&lt;/h5&gt;&lt;hr&gt;
&lt;p&gt;最近对go语言萌生了不小的学习欲望，因而找了一本书开始看，看到指针一节，不禁再次想起了那些被c语言支配的恐怖日子（这也是我选择java的原因啊，（╯’ - ‘)╯︵ ┻━┻ ）。不过，经过再次整理之后发现其实指针这个概念还是蛮好理解的，也希望这篇小文章能给那些难以理解指针的童鞋一点帮助（没帮倒忙就好，o(╯□╰)o），下面就来详细说明一番。&lt;/p&gt;
&lt;h5 id=&quot;指针概念解析&quot;&gt;&lt;a href=&quot;#指针概念解析&quot; class=&quot;headerlink&quot; title=&quot;指针概念解析&quot;&gt;&lt;/a&gt;指针概念解析&lt;/h5&gt;&lt;hr&gt;
&lt;p&gt;指针的概念其实主要分为两个部分，一个是内存地址，另一个则是内存地址指向的值。举个栗子：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	a := &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	b := &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(a, b) &lt;span class=&quot;comment&quot;&gt;//输出值：3 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="go" scheme="http://leejoker.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>如何创建六边形按钮</title>
    <link href="http://leejoker.github.io/2016/09/21/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%8C%89%E9%92%AE/"/>
    <id>http://leejoker.github.io/2016/09/21/如何创建六边形按钮/</id>
    <published>2016-09-21T04:55:14.000Z</published>
    <updated>2018-05-09T14:23:26.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;div旋转&quot;&gt;&lt;a href=&quot;#div旋转&quot; class=&quot;headerlink&quot; title=&quot;div旋转﻿&quot;&gt;&lt;/a&gt;div旋转﻿&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;			.hexHead &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;				width:80px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;				height:138px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;				background-color: chartreuse;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;				-webkit-transform: rotate(60deg); &lt;span class=&quot;comment&quot;&gt;&amp;lt;!--这里旋转60度--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;				margin-left: 48px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;			&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;			.hexCenter &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;				width:80px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;				height:138px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;				background-color: chartreuse;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;				margin-left: 48px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;				margin-top:-138px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;			&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;			.hexBottom &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;				width:80px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;				height:138px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;				background-color: chartreuse;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;				-webkit-transform: rotate(-60deg);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;				margin-left: 48px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;				margin-top:-138px;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hexHead&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hexCenter&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hexBottom&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="web前端" scheme="http://leejoker.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
