<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on ESPIER</title>
    <link>https://leejoker.github.io/tags/go/</link>
    <description>Recent content in go on ESPIER</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 28 Sep 2016 00:02:19 +0000</lastBuildDate><atom:link href="https://leejoker.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>bilibili-go项目源码学习笔记_2</title>
      <link>https://leejoker.github.io/post/bilibili-go%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/</link>
      <pubDate>Wed, 28 Sep 2016 00:02:19 +0000</pubDate>
      
      <guid>https://leejoker.github.io/post/bilibili-go%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/</guid>
      <description>&lt;p&gt;这一篇主要说明application.go的主要构成和其中用到方法的主要作用。&lt;/p&gt;
&lt;h3 id=&#34;参数定义&#34;&gt;参数定义&lt;/h3&gt;
&lt;p&gt;application.go中定义了初始化时需要用到的常量和变量&lt;/p&gt;
&lt;h4 id=&#34;常量定义&#34;&gt;常量定义：&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (
    INDEX_CACHE        = &amp;quot;index&amp;quot;        //各类别下rank
    ALL_RANK_CACHE     = &amp;quot;all_rank&amp;quot;     //总的rank
    BANGUMI_CACHE      = &amp;quot;bangumi&amp;quot;      //番剧
    BANGUMI_LIST_CACHE = &amp;quot;bangumi_list&amp;quot; //新番放松表
    SORT_TOP_CACHE     = &amp;quot;sort-&amp;quot;        //具体某个类别rank(这个在index_cache中要用到)
    LIVE_INDEX_CACHE   = &amp;quot;live_index&amp;quot;   //直播rank
)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>bilibili-go项目源码学习笔记_1</title>
      <link>https://leejoker.github.io/post/bilibili-go%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</link>
      <pubDate>Tue, 27 Sep 2016 00:02:19 +0000</pubDate>
      
      <guid>https://leejoker.github.io/post/bilibili-go%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</guid>
      <description>&lt;h4 id=&#34;bilibili-go服务加载流程浅析&#34;&gt;bilibili-go服务加载流程浅析&lt;/h4&gt;
&lt;p&gt;main.go中使用了service包中的application.go创建了新的应用，进而开启了bilibili-go服务，并监听了8080端口。代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    package main

    import (
        &amp;quot;github.com/go-playground/log&amp;quot;
        &amp;quot;github.com/whiteblue/bilibili-go/service&amp;quot;
    )

    func main() {
        app, err := service.NewApplication(&amp;quot;conf.json&amp;quot;)
        if err != nil {
            log.Fatal(err)
        }

        app.Router.Run(&amp;quot;:8080&amp;quot;)
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在application.go中，使用了gin作为web框架，并依次执行了以下操作：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>对于Go语言中指针的思路整理</title>
      <link>https://leejoker.github.io/post/%E5%AF%B9%E4%BA%8Ego%E8%AF%AD%E8%A8%80%E4%B8%AD%E6%8C%87%E9%92%88%E7%9A%84%E6%80%9D%E8%B7%AF%E6%95%B4%E7%90%86/</link>
      <pubDate>Wed, 21 Sep 2016 12:58:24 +0000</pubDate>
      
      <guid>https://leejoker.github.io/post/%E5%AF%B9%E4%BA%8Ego%E8%AF%AD%E8%A8%80%E4%B8%AD%E6%8C%87%E9%92%88%E7%9A%84%E6%80%9D%E8%B7%AF%E6%95%B4%E7%90%86/</guid>
      <description>&lt;h3 id=&#34;为什么要写这个&#34;&gt;为什么要写这个&lt;/h3&gt;
&lt;p&gt;最近对go语言萌生了不小的学习欲望，因而找了一本书开始看，看到指针一节，不禁再次想起了那些被c语言支配的恐怖日子（这也是我选择java的原因啊，（╯&amp;rsquo; - &amp;lsquo;)╯︵ ┻━┻ ）。不过，经过再次整理之后发现其实指针这个概念还是蛮好理解的，也希望这篇小文章能给那些难以理解指针的童鞋一点帮助（没帮倒忙就好，o(╯□╰)o），下面就来详细说明一番。&lt;/p&gt;
&lt;h3 id=&#34;指针概念解析&#34;&gt;指针概念解析&lt;/h3&gt;
&lt;p&gt;指针的概念其实主要分为两个部分，一个是内存地址，另一个则是内存地址指向的值。举个栗子：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
)

func main() {
	a := 3
	b := 5
	fmt.Println(a, b) //输出值：3 5
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
